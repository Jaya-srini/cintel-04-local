[{"name": "app.py", "content": "import faicons as fa  # For using font awesome in cards\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd  # Pandas for data manipulation, required by plotly.express\nimport plotly.express as px  # Plotly Express for making Plotly plots\nimport seaborn as sns  # Seaborn for making Seaborn plots\nfrom shinywidgets import render_plotly  # For rendering Plotly plots\nfrom shiny import reactive, render, req  # To define reactive calculations\nfrom shiny.express import input, ui  # To define the user interface\n\n# --------------------------------------------------------\n# Get the Data\n# --------------------------------------------------------\n\n# ALWAYS familiarize yourself with the dataset you are working with first.\n# Column names for the penguins dataset include:\n# - species: penguin species (Chinstrap, Adelie, or Gentoo)\n# - island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago\n# - bill_length_mm: length of the bill in millimeters\n# - bill_depth_mm: depth of the bill in millimeters\n# - flipper_length_mm: length of the flipper in millimeters\n# - body_mass_g: body mass in grams\n# - sex: MALE or FEMALE\n\n# Load the dataset into a pandas DataFrame.\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# --------------------------------------------------------\n# Define User Interface (ui)\n# --------------------------------------------------------\n\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\n# Set title to a string in quotes that will appear at the top\n# Set fillable to True to use the whole page width for the UI\nui.page_opts(\n    title=\"Jaya: Palmer Penguins Example\", \n    fillable=True\n    )\n\n# Add a Shiny UI sidebar for user interaction\n# Use the ui.sidebar() function to create a sidebar\n# Set the open parameter to \"open\" to make the sidebar open by default\n# Use a with block to add content to the sidebar\n# Using Shiny Express there is no punctuation between ui elements\n# Use the ui.h2() function to add a 2nd level header to the sidebar\n#   pass in a string argument (in quotes) to set the header text\n# Use ui.input_selectize() to create a dropdown input\n#   pass in three arguments:\n#   the name of the input (in quotes)\n#   the label for the input (in quotes)\n#   a list of options for the input (in square brackets)\n# Use ui.input_numeric() to create a numeric input\n#   pass in two arguments:\n#   the name of the input (in quotes)\n#   the label for the input (in quotes)\n# Use ui.input_slider() to create a slider input\n#   pass in four arguments:\n#   the name of the input (in quotes)\n#   the label for the input (in quotes)\n#   the minimum value for the input (as an integer)\n#   the maximum value for the input (as an integer)\n#   the default value for the input (as an integer)\n# Use ui.input_checkbox_group() to create a checkbox group input\n#   pass in five arguments:\n#   the name of the input (in quotes)\n#   the label for the input (in quotes)\n#   a list of options for the input (in square brackets)\n#   a list of selected options for the input (in square brackets)\n#   a boolean value (True or False) to set the input inline or not\n# Use ui.hr() to add a horizontal rule to the sidebar\n# Use ui.a() to add a hyperlink to the sidebar\n#   pass in two arguments:\n#   the text for the hyperlink (in quotes)\n#   the URL for the hyperlink (in quotes)\n#   set the target parameter to \"_blank\" to open the link in a new tab\n# When passing in multiple arguments to a function, separate them with commas.\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Sidebar\")\n\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\", \"year\"],\n    )\n\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly bins\", 30)\n\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn bins\", 1, 100, 20)\n\n    ui.hr()\n\n    ui.input_checkbox_group(\n        \"selected_species\",\n        \"Species in Scatterplot\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True,\n    )\n\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/Jaya-srini/cintel-04-local.git\",\n        target=\"_blank\",\n    )\n\n# Everything not in the sidebar is in the main panel\n# Tables and charts\n# Use a with block to add content to the ui card\n\n# The @ signs are decorators, which are used to modify the function that follows them.\n# It's a concise way to wrap the following function in a function that will modify it.\n# These decorators are part of the PyShiny package.\n# They are used to render the Plotly and Seaborn plots in the UI.\n# Everything in the function (after the colon) will appear in the card\n\n# Wrap the two cards with histograms together\n# Use ui.layout_columns() to create a two-column layout\n# And indent the code to place the two cards in the columns\nwith ui.layout_columns():\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            # Create a histogram using Plotly Express (aliased as px)\n            # Call px.histogram() function\n            # Pass in three arguments:\n            # the data as a pandas DataFrame (first argument, unnamed)\n            # a named argument named x set to the value returned from the input.selected_attribute() function\n            # a named argument nbins set to the user input bin count returned from the function input.plotly_bin_count() function\n            # Return the histogram created by the px.histogram() function\n            return px.histogram(\n                penguins_df, x=input.selected_attribute(), nbins=input.plotly_bin_count()\n            )\n\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n\n        @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")\n        def seaborn_histogram():\n            # Create a histogram using Seaborn (which we aliased as sns)\n            # Seaborn charts are a bit different\n            # You can't just return the chart - instead, we create\n            # a chart object, and call methods on it to set the title,\n            # x-axis label, and y-axis label\n            # Call sns.histplot() function\n            # Pass in three arguments:\n            # the data as a pandas DataFrame (first argument, unnamed)\n            # a named argument named x set to the value returned from the input.selected_attribute() function\n            # a named argument bins set to the user input bin count returned from the function input.seaborn_bin_count() function\n            # Return the histplot object we created and customized\n            histplot = sns.histplot(\n                data=penguins_df, x=\"body_mass_g\", bins=input.seaborn_bin_count()\n            )\n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_xlabel(\"Mass (g)\")\n            histplot.set_ylabel(\"Count\")\n            return histplot\n\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        # Create a Plotly scatterplot using Plotly Express\n        # Call px.scatter() function\n        # Pass in six arguments:\n        # the data as a pandas DataFrame (first argument, unnamed)\n        # a named argument named x set to the value returned from the input.selected_attribute() function\n        # a named argument named y set to the string \"body_mass_g\"\n        # a named argument named color set to the string \"species\"\n        # a named argument named title set to the string \"Penguins Plot (Plotly Express)\"\n        # a named argument named labels set to a dictionary with two key-value pairs\n        #    the first key is \"bill_length_mm\" and the value is \"Bill Length (mm)\"\n        #    the second key is \"body_mass_g\" and the value is \"Body Mass (g)\"\n        # a named argument named size_max set to the integer 8\n        # Return the scatterplot created by the px.scatter() function\n        return px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            title=\"Penguins Plot (Plotly Express)\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n            },\n            size_max=8, # set the maximum marker size\n        )\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# In this case, only the last chart uses the filtered data,\n# so only the last chart will be updated when the data changes.\n\n\n@reactive.calc\ndef filtered_data():\n\n    # The required function req() is used to ensure that\n    # the input.selected_species() function is not empty.\n    req(input.selected_species())\n\n    # If not empty, filter the data otherwise, just return the original data\n\n    # Use the isin() method to filter the DataFrame\n    # The method returns a boolean Series with the same index as the original DataFrame\n    # Each row is:\n    #   True if the species is in the input.selected_species() list\n    #   False if the species is not\n    isSpeciesMatch = penguins_df[\"species\"].isin(input.selected_species())\n\n    # Use the boolean filter mask in square brackets to filter the DataFrame\n    # Return the filtered DataFrame when the function is triggered\n    # Filter masks can be combined with the & operator for AND and the | operator for OR\n    return penguins_df[isSpeciesMatch]\n\n\n# Additional Python Notes\n# ------------------------\n# Capitalization matters in Python. Python is case-sensitive: min and Min are different.\n# Spelling matters in Python. You must match the spelling of functions and variables exactly.\n# Indentation matters in Python. Indentation is used to define code blocks and must be consistent.\n\n# Functions\n# ---------\n# Functions are used to group code together and make it more readable and reusable.\n# We define custom functions that can be called later in the code.\n# Functions are blocks of logic that can take inputs, perform work, and return outputs.\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon. \n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n# For example:\n#    The function filtered_data() takes no arguments.\n#    The function between(min, max) takes two arguments, a minimum and maximum value.\n#    Arguments can be positional or keyword arguments, labeled with a parameter name.\n\n# The function body is indented (consistently!) after the colon. \n# Use the return keyword to return a value from a function.\n    \n# Calling Functions\n# -----------------\n# Call a function by using its name followed by parentheses and any required arguments.\n    \n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n    ", "type": "text"}]